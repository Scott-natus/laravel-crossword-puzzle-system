<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\PzWord;
use App\Services\GeminiService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class GenerateWordsScheduler extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'puzzle:generate-words-scheduler {--limit=20 : Ìïú Î≤àÏóê ÏÉùÏÑ±Ìï† Îã®Ïñ¥ Ïàò} {--category= : ÌäπÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨Îßå ÏÉùÏÑ±} {--dry-run : Ïã§Ï†ú ÏÉùÏÑ±ÌïòÏßÄ ÏïäÍ≥† ÌÖåÏä§Ìä∏Îßå}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Ïû¨ÎØ∏ÎÇòÏù¥ APIÎ•º ÌôúÏö©ÌïòÏó¨ ÏÉàÎ°úÏö¥ Îã®Ïñ¥Îì§ÏùÑ ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÌïòÎäî Ïä§ÏºÄÏ§ÑÎü¨';

    private $geminiService;

    /**
     * ÏÉùÏÑ± Í∞ÄÎä•Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
     */
    private $availableCategories = [
        'IT', 'ÏûêÏó∞Í≥ºÌïô', 'ÏùòÌïô/Î≥¥Í±¥', 'ÏòàÏà†', 'Ï†ïÏπò', 'Ï≤¥Ïú°', 
        'ÏÇ¨ÏûêÏÑ±Ïñ¥', 'ÏÇ¨Ìöå', 'Ïù∏Î¨∏', 'Î¨∏Ìôî', 'Í≥µÌïô', 'Í≤ΩÏ†ú'
    ];

    /**
     * Create a new command instance.
     */
    public function __construct(GeminiService $geminiService)
    {
        parent::__construct();
        $this->geminiService = $geminiService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $limit = (int) $this->option('limit');
        $category = $this->option('category');
        $dryRun = $this->option('dry-run');

        $logMessage = "üöÄ Îã®Ïñ¥ ÏÉùÏÑ± Ïä§ÏºÄÏ§ÑÎü¨ ÏãúÏûë - " . now()->format('Y-m-d H:i:s');
        $this->info($logMessage);
        $this->writeToLog($logMessage);

        $this->info("üìä ÏÉùÏÑ±Ìï† Îã®Ïñ¥ Ïàò: {$limit}Í∞ú");
        $this->info("üè∑Ô∏è ÎåÄÏÉÅ Ïπ¥ÌÖåÍ≥†Î¶¨: " . ($category ?: 'ÎûúÎç§ ÏÑ†ÌÉù'));
        $this->info("üß™ ÌÖåÏä§Ìä∏ Î™®Îìú: " . ($dryRun ? 'Ïòà' : 'ÏïÑÎãàÏò§'));

        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù
        $targetCategory = $category ?: $this->selectRandomCategory();
        $this->info("üéØ ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨: {$targetCategory}");
        
        // ÏùåÏ†à Ï°∞Í±¥ ÌëúÏãú
        $syllableCondition = $this->getSyllableCondition(now()->minute);
        $this->info("üî§ ÏùåÏ†à Ï°∞Í±¥: {$syllableCondition}");

        // Ïû¨ÎØ∏ÎÇòÏù¥ APIÎ°ú Îã®Ïñ¥ ÏÉùÏÑ± ÏöîÏ≤≠
        $prompt = $this->buildPrompt($targetCategory, $limit);
        
        try {
            $result = $this->geminiService->generateWords($prompt);
            
            if (!$result['success']) {
                $this->error("‚ùå Ïû¨ÎØ∏ÎÇòÏù¥ API Ìò∏Ï∂ú Ïã§Ìå®: " . ($result['error'] ?? 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'));
                $this->writeToLog("Ïû¨ÎØ∏ÎÇòÏù¥ API Ìò∏Ï∂ú Ïã§Ìå®: " . ($result['error'] ?? 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'));
                return 1;
            }

            $suggestedWords = $result['words'] ?? [];
            
            if (empty($suggestedWords)) {
                $this->warn("‚ö†Ô∏è ÏÉùÏÑ±Îêú Îã®Ïñ¥Í∞Ä ÏóÜÏäµÎãàÎã§.");
                $this->writeToLog("ÏÉùÏÑ±Îêú Îã®Ïñ¥Í∞Ä ÏóÜÏäµÎãàÎã§.");
                return 0;
            }

            $this->info("üìù Ïû¨ÎØ∏ÎÇòÏù¥ÏóêÏÑú Ï†úÏïàÌïú Îã®Ïñ¥: " . count($suggestedWords) . "Í∞ú");

            if ($dryRun) {
                $this->info("üß™ ÌÖåÏä§Ìä∏ Î™®Îìú - Ïã§Ï†ú Ï†ÄÏû•ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
                $this->table(
                    ['Ïπ¥ÌÖåÍ≥†Î¶¨', 'Îã®Ïñ¥', 'Í∏∏Ïù¥', 'Ï§ëÎ≥µÏó¨Î∂Ä'],
                    $this->checkDuplicates($suggestedWords, $targetCategory)
                );
                return 0;
            }

            // Ï§ëÎ≥µ Ï≤¥ÌÅ¨ Î∞è Ï†ÄÏû•
            $newWords = $this->processAndSaveWords($suggestedWords, $targetCategory);

            // Í≤∞Í≥º Ï∂úÎ†•
            $this->info("üìä Îã®Ïñ¥ ÏÉùÏÑ± ÏôÑÎ£å!");
            $this->info("‚úÖ ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Îã®Ïñ¥: " . count($newWords) . "Í∞ú");
            $this->info("‚è≠Ô∏è Ï§ëÎ≥µÏúºÎ°ú Ïä§ÌÇµÎêú Îã®Ïñ¥: " . (count($suggestedWords) - count($newWords)) . "Í∞ú");

            if (!empty($newWords)) {
                $this->table(
                    ['Ïπ¥ÌÖåÍ≥†Î¶¨', 'Îã®Ïñ¥', 'Í∏∏Ïù¥'],
                    array_map(function($word) {
                        return [$word['category'], $word['word'], mb_strlen($word['word'])];
                    }, $newWords)
                );
            }

            // ÌÜµÍ≥Ñ Ï†ïÎ≥¥
            $totalWords = PzWord::active()->count();
            $categoryWords = PzWord::active()->where('category', $targetCategory)->count();
            
            $statsMessage = "üìà Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÜµÍ≥Ñ - {$targetCategory}: {$categoryWords}Í∞ú (Ï†ÑÏ≤¥: {$totalWords}Í∞ú)";
            $this->writeToLog($statsMessage);

            $this->newLine();
            $this->info("üìà Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÜµÍ≥Ñ:");
            $this->table(
                ['Ïπ¥ÌÖåÍ≥†Î¶¨', 'Îã®Ïñ¥ Ïàò', 'Ï†ÑÏ≤¥ ÎåÄÎπÑ'],
                [
                    [$targetCategory, $categoryWords, round(($categoryWords / $totalWords) * 100, 1) . '%'],
                    ['Ï†ÑÏ≤¥', $totalWords, '100%'],
                ]
            );

        } catch (\Exception $e) {
            $this->error("‚ùå Îã®Ïñ¥ ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù: " . $e->getMessage());
            $this->writeToLog("Îã®Ïñ¥ ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù: " . $e->getMessage());
            return 1;
        }

        return 0;
    }

    /**
     * ÎûúÎç§ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù
     */
    private function selectRandomCategory()
    {
        return $this->availableCategories[array_rand($this->availableCategories)];
    }

    /**
     * Ïã≠ÏûêÎÇ±Îßê ÌçºÏ¶êÏö© Îã®Ïñ¥ ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏
     */
    private function buildPrompt($category, $limit)
    {
        return "Ïã≠ÏûêÎÇ±Îßê ÌçºÏ¶êÏùÑ ÎßåÎì§Í∏∞ ÏúÑÌïú Îã®Ïñ¥Î•º Ï†úÏïàÌï¥Ï§ò

Îã®Ïñ¥Îäî 'Î™ÖÏÇ¨,Í≥†Ïú†Î™ÖÏÇ¨, Ïã†Ï°∞Ïñ¥' Î°ú Ïù¥Î£®Ïñ¥ÏßÑ 2ÏùåÏ†àÍ≥º 5ÏùåÏ†à ÏÇ¨Ïù¥Ïùò Îã®Ïñ¥Î•º {$limit}Í∞ú Ï†ïÎèÑ Ï∂îÏ≤úÌï¥Ï§ò

Í∑∏Î¶¨Í≥† Í∑∏ Îã®Ïñ¥Í∞Ä Í∞ÄÏû• Ïó∞Í¥ÄÎêúÎã§Í≥† ÏÉùÍ∞ÅÎêòÎäî Ïπ¥ÌÖåÍ≥†Î¶¨ÏôÄ ÏåçÏúºÎ°ú Ï∂îÏ≤úÌï¥Ï§¨ÏúºÎ©¥ Ï¢ãÍ≤†Ïñ¥

ÌïúÏ§ÑÏóê [Ïπ¥ÌÖåÍ≥†Î¶¨,Îã®Ïñ¥] ÌòïÌÉúÎ°ú Î≥¥Ïó¨Ï§ò

ÏòàÏãú:
[ÎèôÎ¨º,Í∞ïÏïÑÏßÄ]
[ÏùåÏãù,ÍπÄÏπòÏ∞åÍ∞ú]
[ÏßÅÏóÖ,ÏùòÏÇ¨]
[Ïä§Ìè¨Ï∏†,Ï∂ïÍµ¨Í≥µ]

Í∞Å Ï§ÑÏóê ÌïòÎÇòÏî©, Ï¥ù {$limit}Í∞úÎ•º Ï†úÏãúÌï¥Ï£ºÏÑ∏Ïöî.

Ï£ºÏùò: Î∞òÎìúÏãú [Ïπ¥ÌÖåÍ≥†Î¶¨,Îã®Ïñ¥] ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî.";
    }

    /**
     * Ïã≠ÏûêÎÇ±Îßê ÌçºÏ¶êÏö© ÏùåÏ†à Ï°∞Í±¥ Î∞òÌôò
     */
    private function getSyllableCondition($minute)
    {
        return "2ÏùåÏ†àÏóêÏÑú 5ÏùåÏ†à ÏÇ¨Ïù¥Ïùò Îã®Ïñ¥";
    }

    /**
     * Ï§ëÎ≥µ Ï≤¥ÌÅ¨ (ÌÖåÏä§Ìä∏Ïö©)
     */
    private function checkDuplicates($suggestedWords, $category)
    {
        $result = [];
        
        foreach ($suggestedWords as $wordData) {
            $word = $wordData['word'] ?? '';
            $wordCategory = $wordData['category'] ?? $category;
            $isDuplicate = PzWord::where('word', $word)->exists();
                
            $result[] = [
                $wordCategory,
                $word,
                mb_strlen($word),
                $isDuplicate ? 'Ï§ëÎ≥µ' : 'Ïã†Í∑ú'
            ];
        }
        
        return $result;
    }

    /**
     * Îã®Ïñ¥ Ï≤òÎ¶¨ Î∞è Ï†ÄÏû•
     */
    private function processAndSaveWords($suggestedWords, $category)
    {
        $newWords = [];
        
        foreach ($suggestedWords as $wordData) {
            $word = trim($wordData['word'] ?? '');
            $category = trim($wordData['category'] ?? $category);
            
            // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ (2~5ÏùåÏ†à)
            if (empty($word) || mb_strlen($word) < 2 || mb_strlen($word) > 5) {
                continue;
            }
            
            // Ï§ëÎ≥µ Ï≤¥ÌÅ¨ (Ï†ÑÏ≤¥ Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú)
            $exists = PzWord::where('word', $word)->exists();
                
            if ($exists) {
                $this->writeToLog("Ï§ëÎ≥µ Îã®Ïñ¥ Ïä§ÌÇµ: [{$category}, {$word}]");
                continue;
            }
            
            // ÏÉà Îã®Ïñ¥ Ï†ÄÏû•
            try {
                $newWord = PzWord::create([
                    'word' => $word,
                    'category' => $category,
                    'difficulty' => 2, // Í∏∞Î≥∏ ÎÇúÏù¥ÎèÑ
                    'is_active' => true,
                ]);
                
                $newWords[] = [
                    'category' => $category,
                    'word' => $word,
                    'id' => $newWord->id
                ];
                
                $this->writeToLog("ÏÉà Îã®Ïñ¥ Ï∂îÍ∞Ä: [{$category}, {$word}] (ID: {$newWord->id})");
                
            } catch (\Exception $e) {
                $this->writeToLog("Îã®Ïñ¥ Ï†ÄÏû• Ïã§Ìå®: [{$category}, {$word}] - " . $e->getMessage());
            }
        }
        
        return $newWords;
    }

    /**
     * Î°úÍ∑∏ ÌååÏùºÏóê ÏßÅÏ†ë Í∏∞Î°ù
     */
    private function writeToLog($message)
    {
        $logFile = storage_path('logs/word-scheduler.log');
        $timestamp = now()->format('Y-m-d H:i:s');
        $logEntry = "[{$timestamp}] {$message}" . PHP_EOL;
        
        file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
    }
} 